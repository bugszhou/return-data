{"version":3,"file":"return-data.min.js","sources":["../src/BaseReturn.ts","../src/index.ts"],"sourcesContent":["export interface IReturnData<T = any> {\n  getStatus(): string;\n  getData(): T;\n  getMsg(): string;\n  /**\n   * 获取额外数据\n   */\n  getExtraData(): any;\n  /**\n   * 设置额外数据\n   */\n  setExtraData(data: any): void;\n}\n\nexport default class BaseReturn<IData = any> implements IReturnData {\n  private status = \"\";\n\n  private msg = \"\";\n\n  private data: IData | null = null;\n\n  private extraData: any = null;\n\n  constructor(status = \"\", data: IData | null | undefined = null, msg = \"\") {\n    this.status = status;\n    this.msg = msg;\n    this.data = data;\n  }\n\n  setStatus(status: string) {\n    this.status = status;\n  }\n\n  setMsg(msg: string) {\n    this.msg = msg;\n  }\n\n  setData(data: IData) {\n    this.data = data;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  getData(): IData | null {\n    return this.data;\n  }\n\n  getMsg() {\n    return this.msg;\n  }\n\n  getExtraData() {\n    return this.extraData;\n  }\n\n  setExtraData(data: any) {\n    this.extraData = data;\n  }\n\n  static getStatusIsFunction(param: any) {\n    return param && typeof param.getStatus === \"function\";\n  }\n\n  static getStatusValue(obj: any) {\n    if (BaseReturn.getStatusIsFunction(obj)) {\n      return obj.getStatus();\n    }\n\n    return \"\";\n  }\n\n  /**\n   * 判断是否成功\n   * @param {any} data\n   * @returns boolean\n   */\n  static isOk(data: any): boolean {\n    return BaseReturn.getStatusIsFunction(data) && data.getStatus() === \"ok\";\n  }\n\n  static isFail(data: any): boolean {\n    return BaseReturn.getStatusIsFunction(data) && data.getStatus() === \"fail\";\n  }\n\n  static isDeny(data: any): boolean {\n    return BaseReturn.getStatusIsFunction(data) && data.getStatus() === \"deny\";\n  }\n\n  /**\n   * 是否是网络错误\n   * @param data\n   * @returns\n   */\n  static isNetWorkError(data: any) {\n    return (\n      (BaseReturn.getStatusIsFunction(data) &&\n        data.getStatus() === \"NETWORK_ERROR\") ||\n      data?.status === \"NETWORK_ERROR\"\n    );\n  }\n\n  /**\n   * 判断data是不是null或者undefined\n   * @param param\n   * @returns\n   */\n  static hasData(param: any): boolean {\n    if (!param || typeof param.getData !== \"function\") {\n      return false;\n    }\n    const data = param.getData();\n    return !(typeof data === \"undefined\" || data === null);\n  }\n\n  /**\n   * 取消返回类\n   * @returns ReturnData\n   */\n  static cancel(msg?: string) {\n    return new this(\"CANCEL\", null, msg || \"网络异常，请重试\");\n  }\n\n  /**\n   * 是否是取消返回\n   * @param data\n   * @returns\n   */\n  static isCancel(data: any) {\n    return BaseReturn.getStatusValue(data) === \"CANCEL\";\n  }\n\n  /**\n   * 中断类\n   * @returns ReturnData\n   */\n  static interrupt(msg?: string) {\n    return new this(\"INTERRUPT\", null, msg || \"程序中断，请重试\");\n  }\n\n  /**\n   * 是否是中断返回\n   * @param data\n   * @returns\n   */\n  static isInterrupt(data: any) {\n    return BaseReturn.getStatusValue(data) === \"INTERRUPT\";\n  }\n\n  /**\n   * 顶级错误类\n   * @returns ReturnData\n   */\n  static error(msg?: string) {\n    return new this(\"ERROR\", null, msg || \"程序中断，请重试\");\n  }\n\n  /**\n   * 是否是顶级错误\n   * @param data\n   * @returns\n   */\n  static isError(data: any) {\n    return BaseReturn.getStatusValue(data) === \"ERROR\";\n  }\n}\n","/*\n * @Author: youzhao.zhou\n * @Date: 2021-08-19 16:51:33\n * @Last Modified by: youzhao.zhou\n * @Last Modified time: 2021-09-08 21:01:35\n * @Description 统一返回格式\n */\n\nimport BaseReturn, { IReturnData } from \"./BaseReturn\";\n\nexport { BaseReturn };\n\n/**\n * 统一返回格式\n */\nexport default class ReturnData<T = any> {\n  /**\n   * 状态值类型\n   *\n   * ok -- 成功\n   * deny -- 用户拒绝或系统拒绝\n   * fail -- 执行失败\n   */\n  private status: string;\n\n  private data: T | null;\n\n  private msg = \"\";\n\n  private extraData: any = null;\n\n  constructor(\n    status: string,\n    data: T | null | undefined = null,\n    msg = \"success\",\n  ) {\n    this.status = status;\n    this.data = data;\n    this.msg = msg;\n  }\n\n  getStatus(): string {\n    return this.status;\n  }\n\n  getData(): T | null {\n    return this.data;\n  }\n\n  getMsg(): string {\n    return this.msg;\n  }\n\n  setMsg(msg: string): void {\n    this.msg = msg;\n  }\n\n  getExtraData() {\n    return this.extraData;\n  }\n\n  setExtraData(data: any) {\n    this.extraData = data;\n  }\n\n  /**\n   * 判断是否成功\n   * @param {any} data\n   * @returns boolean\n   */\n  static isOk(data: any): boolean {\n    return getStatusIsFunction(data) && data.getStatus() === \"ok\";\n  }\n\n  static isFail(data: any): boolean {\n    return getStatusIsFunction(data) && data.getStatus() === \"fail\";\n  }\n\n  static isDeny(data: any): boolean {\n    return getStatusIsFunction(data) && data.getStatus() === \"deny\";\n  }\n\n  /**\n   * 判断data是不是null或者undefined\n   * @param param\n   * @returns\n   */\n  static hasData(param: any): boolean {\n    if (!param || typeof param.getData !== \"function\") {\n      return false;\n    }\n    const data = param.getData();\n    return !(typeof data === \"undefined\" || data === null);\n  }\n\n  /**\n   * 是否是网络错误\n   * @param data\n   * @returns\n   */\n  static isNetWorkError(data: any): boolean {\n    return (\n      (ReturnData.getStatusIsFunction(data) &&\n        data.getStatus() === \"NETWORK_ERROR\") ||\n      data?.status === \"NETWORK_ERROR\"\n    );\n  }\n\n  /**\n   * 覆盖原有的逻辑\n   * @param data\n   * @returns\n   */\n  static cover<T = boolean>(keyName: string, value: (data: any) => T): void {\n    (ReturnData as any)[keyName] = value;\n  }\n\n  /**\n   * 返回成功\n   * @param data\n   * @returns ReturnData\n   */\n  static success<IData = any>(data?: IData) {\n    return new ReturnData<IData>(\"ok\", data);\n  }\n\n  /**\n   * 返回失败\n   * @returns ReturnData\n   */\n  static fail(msg?: string) {\n    const data = new ReturnData(\"fail\", null);\n    data.setMsg(msg || \"\");\n    return data;\n  }\n\n  /**\n   * 统一异常处理\n   * @param {IReturnData} ex\n   * @returns\n   */\n  static exception(ex: IReturnData<null>) {\n    return new ReturnData<null>(ex.getStatus(), ex.getData(), ex.getMsg());\n  }\n\n  /**\n   * 返回拒绝\n   * @returns ReturnData\n   */\n  static deny(msg?: string) {\n    return new ReturnData(\"deny\", null, msg || \"\");\n  }\n\n  /**\n   * 网络异常返回类\n   * @returns ReturnData\n   */\n  static networkError(msg?: string) {\n    return new ReturnData(\"NETWORK_ERROR\", null, msg || \"网络异常，请重试\");\n  }\n\n  /**\n   * 中断类\n   * @returns ReturnData\n   */\n  static interrupt(msg?: string) {\n    return new ReturnData(\"INTERRUPT\", null, msg || \"程序中断，请重试\");\n  }\n\n  /**\n   * 是否是中断返回\n   * @param data\n   * @returns\n   */\n  static isInterrupt(data: any) {\n    return ReturnData.getStatusValue(data) === \"INTERRUPT\";\n  }\n\n  /**\n   * 取消返回类\n   * @returns ReturnData\n   */\n  static cancel(msg?: string) {\n    return new ReturnData(\"CANCEL\", null, msg || \"网络异常，请重试\");\n  }\n\n  /**\n   * 是否是取消返回\n   * @param data\n   * @returns\n   */\n  static isCancel(data: any) {\n    return ReturnData.getStatusValue(data) === \"CANCEL\";\n  }\n\n  /**\n   * 顶级错误类\n   * @returns ReturnData\n   */\n  static error(msg?: string) {\n    return new this(\"ERROR\", null, msg || \"程序中断，请重试\");\n  }\n\n  /**\n   * 是否是顶级错误\n   * @param data\n   * @returns\n   */\n  static isError(data: any) {\n    return ReturnData.getStatusValue(data) === \"ERROR\";\n  }\n\n  static getStatusIsFunction(param: any) {\n    return param && typeof param.getStatus === \"function\";\n  }\n\n  static getStatusValue(obj: any) {\n    if (ReturnData.getStatusIsFunction(obj)) {\n      return obj.getStatus();\n    }\n\n    return obj?.status ?? \"\";\n  }\n}\n\nfunction getStatusIsFunction(param: any) {\n  return param && typeof param.getStatus === \"function\";\n}\n"],"names":["status","data","msg","this","BaseReturn","extraData","param","getStatus","obj","getStatusIsFunction","getData","getStatusValue","ReturnData","keyName","value","setMsg","ex","getMsg"],"mappings":"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"}